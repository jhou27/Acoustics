function signal = syn5 (srate,frame_dur,nf,Ftable)% synthesize.m% Louis Goldstein% November 2009% formant synthesizer% usage:% [out, t] = syn5 (srate,frame_dur,Ftable)%% input arguments:% srate	sampling rate (in Hz)% f0    	fundamental frequency (in Hz)% frame_dur duration of each frame in milliseconds% Ftable  character string containing filename of F table%           Row 1: AV%           Row 2: f0%           Row 3: AH% 	      	Row 4 to Row 4+nf-1: formant frequencies %           Row 4+nf to Row 4+2*nf-1: formant bandwiths%           Row 4+2*nf: AF%           then rows for A2-A6, then AB%           last Row iFNZ%%returned arguments:% signal	vector with synthesized waveform samples% location of parameters in tableiAV = 1;iF0 = 2;iAH =3;iF1 = 4;iB1 = iF1+nf;iAF = iB1+nf;iFNZ = iAF +7;AV_gain = 100;		% voiced gain factorAH_gain = .01;		% voiceless gain factorAF_gain = .01;Again = [0 .01 .01 .01 .01 .01];ABgain = .1;% nasal constantsFNP = 270;BNP = 100;FNZ = 270;BNZ = 100;FBW = get_FBW(Ftable);nframes = size(FBW,2);dur = nframes * (frame_dur / 1000 );% duration in secondssamps_per_frame = floor(srate * (frame_dur / 1000));% generate sources% voiced sourcef0 = FBW(iF0,:);AV = FBW(iAV,:)*AV_gain;[voiced, mod_pulse] = make_pulses(f0, srate, frame_dur, AV);nframes = min ([floor(length(voiced) ./ samps_per_frame) nframes]);tot_samples = nframes * samps_per_frame;voiced = voiced(1:tot_samples);RG = 0;							% RG is the frequency of the Glottal ResonatorBWG = 100;					% BWG is the bandwidth of the Glottal Resonator[b_glo,a_glo]=resonance(srate,RG,BWG);		% filter impulse train thru low-pass filter % to get approximation to shape of glottal pulsevoiced=filter(b_glo, a_glo , voiced);% noise sourceAH = FBW(iAH,1:nframes)*AH_gain;rng(1)noise = repmat(randn(1,samps_per_frame),1,nframes);%noise = randn(1, tot_samples);  % Gaussian noise% take derivative (calculate velocity source from pressure source)noise = filter ([.5 .5], 1, noise);mod_pulse = mod_pulse (1: tot_samples);noise = noise .* mod_pulse;AH_int = interp(AH, samps_per_frame);AH_int = AH_int(1:tot_samples);% compute composite sourcein = voiced + (noise .* AH_int);% filter through nasal pole and zeroif size(FBW,1) >= iFNZ	beg_sample = 1;	z = [];    for iframe = 1:nframes	   		F = FNP;		BW = BNP;	    [b,a]=resonance(srate,F,BW);		[out,z] = filter(b,a,in(beg_sample:beg_sample+samps_per_frame-1),z); 		in(beg_sample:beg_sample+samps_per_frame-1) = out;		beg_sample = beg_sample+samps_per_frame;	end		beg_sample = 1;	z = [];    for iframe = 1:nframes	   		F = FBW(iFNZ,iframe);		BW = BNZ;	    [a,b]=resonance(srate,F,BW);        a=1;		[out,z] = filter(b,a,in(beg_sample:beg_sample+samps_per_frame-1),z); 		in(beg_sample:beg_sample+samps_per_frame-1) = out;		beg_sample = beg_sample+samps_per_frame;	end	end% filter successive frames of source through VT cascadefor i = nf:-1:1	beg_sample = 1;	z = [];    for iframe = 1:nframes	   		F = FBW (iF1:iF1+nf-1, iframe);		BW = FBW (iB1:iB1+nf-1, iframe);	    [b,a]=resonance(srate,F(i),BW(i));		[out,z] = filter(b,a,in(beg_sample:beg_sample+samps_per_frame-1),z); 		in(beg_sample:beg_sample+samps_per_frame-1) = out;		beg_sample = beg_sample+samps_per_frame;	endendsignal = in(1: nframes*samps_per_frame);% parallel noise branch: do only if data found in appropriate rows in fileif size(FBW,1) >= iAF	% filter thru formants in parallel	% start with F2 and go to FN+1	noise_in = AF_gain * noise;	noise_out = zeros(1, length(signal));	for i = 2:nf+1		beg_sample = 1;		z = [];		f_out = [];    	for iframe = 1:nframes			if i <= nf				F = FBW (iF1+i-1, iframe);				BW  = FBW (iB1+i-1, iframe);			else				F = (srate/2) - 100;				BW = 100;			end	    	[b,a]=resonance(srate,F,BW);			[out,z] = filter(b,a,noise_in(beg_sample:beg_sample+samps_per_frame-1),z);			% FAmp factor = A(i) * Again(i) * AF            Famp = FBW(iAF+i-1, iframe) .* Again(i) .* FBW(iAF, iframe);			f_out = [f_out out.*Famp];			beg_sample = beg_sample+samps_per_frame;		end		noise_out = noise_out + f_out;        	end		% Bypass the formant resonators for noise produced at the lips	beg_sample = 1;	By_out = [];	for iframe = 1:nframes			Famp = FBW(iAF+nf+1, iframe) .* ABgain .* FBW(iAF, iframe);			By_out = [By_out noise_in(beg_sample:beg_sample+samps_per_frame-1).*Famp];			beg_sample = beg_sample+samps_per_frame;	end	% Add parallel noise output and Bypass output to cascade output	signal = signal + noise_out + By_out;end% filter through high pass radiation filter and filter% this calculates volume velocity at a distance from the the mouth,signal = filter([1 -1],1,signal);soundsc (signal, srate);%plot the values of F1-F4 as function of frame in the upper panel%plot the synthesized signal as a function of t in ms in the lower panelfigure (1)frames = 1:nframes;subplot (3,1,1), plot (frames, FBW(iF1:iF1+3, :),'-o')xlabel ('Frame No.')subplot (3,1,2), plot (frames, FBW(iAV, :),'-o')hold onsubplot (3,1,2), plot (frames, FBW(iAH, :),'-xr')if size(FBW,1) >= iAF; subplot (3,1,2), plot (frames, FBW(iAF, :),'-xk'); endhold offmake_spect2(signal', srate,6);%subplot (2,1,2), plot ([1:length(signal)]*1000/srate,signal);xlabel ('Time in milliseconds');